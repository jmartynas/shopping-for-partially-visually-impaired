// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package naudotojai

import (
	"context"
	"database/sql"
)

const getInformation = `-- name: GetInformation :one
SELECT produktas.id, bruksninis_kodas, produktas.pavadinimas, kaina, kategorija, sudetis, maistingumas, pagaminimo_data, galiojimo_pabaigos_data, fk_parduotuve_id, fk_gamintojas_id, gamintojas.id, gamintojas.pavadinimas, kilmes_salis, parduotuve.id, parduotuve.pavadinimas, nuotrauka FROM produktas
LEFT JOIN gamintojas ON produktas.fk_gamintojas_id=gamintojas.id
LEFT JOIN parduotuve ON produktas.fk_parduotuve_id=parduotuve.id
WHERE parduotuve.pavadinimas = ? AND
produktas.bruksninis_kodas = ?
LIMIT 1
`

type GetInformationParams struct {
	Pavadinimas     string
	BruksninisKodas string
}

type GetInformationRow struct {
	ID                    int64
	BruksninisKodas       string
	Pavadinimas           string
	Kaina                 string
	Kategorija            string
	Sudetis               string
	Maistingumas          string
	PagaminimoData        string // time.Time
	GaliojimoPabaigosData string // time.Time
	FkParduotuveID        int64
	FkGamintojasID        int64
	ID_2                  sql.NullInt64
	Pavadinimas_2         sql.NullString
	KilmesSalis           sql.NullString
	ID_3                  sql.NullInt64
	Pavadinimas_3         sql.NullString
	Nuotrauka             sql.NullString
}

func (q *Queries) GetInformation(ctx context.Context, arg GetInformationParams) (GetInformationRow, error) {
	row := q.db.QueryRowContext(ctx, getInformation, arg.Pavadinimas, arg.BruksninisKodas)
	var i GetInformationRow
	err := row.Scan(
		&i.ID,
		&i.BruksninisKodas,
		&i.Pavadinimas,
		&i.Kaina,
		&i.Kategorija,
		&i.Sudetis,
		&i.Maistingumas,
		&i.PagaminimoData,
		&i.GaliojimoPabaigosData,
		&i.FkParduotuveID,
		&i.FkGamintojasID,
		&i.ID_2,
		&i.Pavadinimas_2,
		&i.KilmesSalis,
		&i.ID_3,
		&i.Pavadinimas_3,
		&i.Nuotrauka,
	)
	return i, err
}

const getShops = `-- name: GetShops :many
SELECT id, pavadinimas, nuotrauka FROM parduotuve
`

func (q *Queries) GetShops(ctx context.Context) ([]Parduotuve, error) {
	rows, err := q.db.QueryContext(ctx, getShops)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parduotuve
	for rows.Next() {
		var i Parduotuve
		if err := rows.Scan(&i.ID, &i.Pavadinimas, &i.Nuotrauka); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
